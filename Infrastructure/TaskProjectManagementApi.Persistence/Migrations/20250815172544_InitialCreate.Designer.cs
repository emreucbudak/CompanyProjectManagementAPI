// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskProjectManagementApi.Persistence.AppDbContext;

#nullable disable

namespace TaskProjectManagementApi.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250815172544_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.AllReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MissionStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ReportDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReporterWorkerId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MissionStatusId");

                    b.HasIndex("ReporterWorkerId");

                    b.HasIndex("WorkerId");

                    b.ToTable("allReports");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.AnswerStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("answerStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "İnceleniyor"
                        },
                        new
                        {
                            Id = 2,
                            StatusName = "Onaylandı"
                        },
                        new
                        {
                            Id = 3,
                            StatusName = "Reddedildi"
                        });
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.CompanyAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("companiesAuthor");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.IndividualMissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MissionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MissionStatusId")
                        .HasColumnType("int");

                    b.Property<string>("MissionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MissionStatusId");

                    b.HasIndex("WorkerId");

                    b.ToTable("individualMissions");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.IndividualMissionsAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnswerStatusId")
                        .HasColumnType("int");

                    b.Property<int>("IndividualMissionsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AnswerStatusId");

                    b.HasIndex("IndividualMissionsId");

                    b.ToTable("IndividualMissionsAnswers");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.MissionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("missionStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "Başlamadı"
                        },
                        new
                        {
                            Id = 2,
                            StatusName = "Devam Ediyor"
                        },
                        new
                        {
                            Id = 3,
                            StatusName = "Tamamlandı"
                        },
                        new
                        {
                            Id = 4,
                            StatusName = "İptal Edildi"
                        });
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.ReporterWorker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("reporterWorkers");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.TeamMissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MissionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MissionStatusId")
                        .HasColumnType("int");

                    b.Property<string>("MissionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MissionStatusId");

                    b.HasIndex("TeamId");

                    b.ToTable("teamMissions");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.TeamMissionsAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnswerStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("TeamMissionsId")
                        .HasColumnType("int");

                    b.Property<string>("WorkerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerStatusId");

                    b.HasIndex("TeamMissionsId");

                    b.ToTable("teamMissionsAnswers");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLeaved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TeamId");

                    b.ToTable("workers");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.AllReports", b =>
                {
                    b.HasOne("TaskProjectManagementApi.Domain.Entity.MissionStatus", "MissionStatus")
                        .WithMany()
                        .HasForeignKey("MissionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskProjectManagementApi.Domain.Entity.ReporterWorker", "ReporterWorker")
                        .WithMany()
                        .HasForeignKey("ReporterWorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskProjectManagementApi.Domain.Entity.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId");

                    b.Navigation("MissionStatus");

                    b.Navigation("ReporterWorker");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.CompanyAuthor", b =>
                {
                    b.HasOne("TaskProjectManagementApi.Domain.Entity.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.IndividualMissions", b =>
                {
                    b.HasOne("TaskProjectManagementApi.Domain.Entity.MissionStatus", "MissionStatus")
                        .WithMany()
                        .HasForeignKey("MissionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskProjectManagementApi.Domain.Entity.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MissionStatus");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.IndividualMissionsAnswer", b =>
                {
                    b.HasOne("TaskProjectManagementApi.Domain.Entity.AnswerStatus", "AnswerStatus")
                        .WithMany()
                        .HasForeignKey("AnswerStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskProjectManagementApi.Domain.Entity.IndividualMissions", "IndividualMissions")
                        .WithMany()
                        .HasForeignKey("IndividualMissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerStatus");

                    b.Navigation("IndividualMissions");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.ReporterWorker", b =>
                {
                    b.HasOne("TaskProjectManagementApi.Domain.Entity.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.Team", b =>
                {
                    b.HasOne("TaskProjectManagementApi.Domain.Entity.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.TeamMissions", b =>
                {
                    b.HasOne("TaskProjectManagementApi.Domain.Entity.MissionStatus", "MissionStatus")
                        .WithMany()
                        .HasForeignKey("MissionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskProjectManagementApi.Domain.Entity.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MissionStatus");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.TeamMissionsAnswer", b =>
                {
                    b.HasOne("TaskProjectManagementApi.Domain.Entity.AnswerStatus", "AnswerStatus")
                        .WithMany()
                        .HasForeignKey("AnswerStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskProjectManagementApi.Domain.Entity.TeamMissions", "TeamMissions")
                        .WithMany()
                        .HasForeignKey("TeamMissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerStatus");

                    b.Navigation("TeamMissions");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.Worker", b =>
                {
                    b.HasOne("TaskProjectManagementApi.Domain.Entity.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskProjectManagementApi.Domain.Entity.Team", null)
                        .WithMany("Workers")
                        .HasForeignKey("TeamId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TaskProjectManagementApi.Domain.Entity.Team", b =>
                {
                    b.Navigation("Workers");
                });
#pragma warning restore 612, 618
        }
    }
}
